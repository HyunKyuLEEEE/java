
문자열 - "로 묵여 있으면 문자열로 인식하며 자바에서는 String객체를 이용하여 저장

상수 - 수학에서는 변하지 않는 값 의미 컴퓨터에서는 한번만 저장할 수 있는 메모리 의미
상수선언 - 
final int Age; 

상수 초기화 - 상수에서는 일반적으로 대문자로 작성하며 언더바를 사용함
1) 선언과 동시에 초기화
final int Num = 100;
2) 선언 후 초기화
final int Num;
Num = 100;

ex) final int APPLE_COUNT = 10;

Scanner - 사용자로부터 입력되는 정수, 실수, 문자열을 처리하는 클래스
import 작성
import java.util.Sacnner;
Scanner 생성
Scanner sc = new Scanner(System.in) // 표준입력
sc.close(); // 스캐너 닫기

키보드 입력값 받기
정수 : sc.nextInt();
실수 : sc.nextFloat(); 또는 sc.nextDouble();
문자열 : sc.next(); 또는 sc.nextLine();
next() : 공백(스페이스, 탭, 엔터)을 제외한 한 단어를 입력 받음, 다음 공백이 나오기 전까지 문자열을 가져온다.
nextLine() : 공백(스페이스, 탭)을 포함한 문자열을 가져온다.

형변환(Casting) - 값의 자료형을 바꾸는것(boolean 제외)
컴퓨터의 값 처리 원칙
같은 종류 자료형만 대입 가능
같은 종류 자료형만 계산 가능
계산의 결과도 같은 종류의 값이 나와야함

자동 형변환 - 컴파일러가 자동으로 값의 범위가 작은 자료형을 값의 범위가 큰 자료형으로 변환
단, byte와 short자료형의 값의 결과는 무조건 int로 처리한다.

강제 형변환 - 값의 범위가 큰 자료형을 값의 범위가 작은 자료형으로 변환 강제 형변환 시 데이터 손실이 발생할 수 있음
		-> 데이터의 변형, 손실을 감수하고 강제 형변환

출력 메소드
System.out.printf() - 정해져 있는 형식에 맞춰서 그 형식에 맞는 값(변수)을 줄바꿈 하지 않고 출력(C, C++ printf 임)

1. 변수
- 변수를 선언할 수 있다.

- 변수 선언 방법
- 자료형
- 변수명 작성 규칙과 관례

- Scanner
- sysout

2. 연산자
- 연산자 종류를 알고, 결과를 예측할 수 있다.

단항 연산자
논리 부정 연산자 : !
논리 값을 부정하여 반대값으로 변경, 제어문을 활용할 때 많이 쓰임

증감 연산자 : ++, --
피연산자의 값에 1을 더하거나 빼는 연산자로 위치에 따라 결과값이 다르게 나타남

전위 연산 : 먼저 연산 후 다른 연산 실행
후위 연산 : 다른 연산 우선 실행 후 연산

산술연산자 : +,-*,/,%
일반 수학과 동일한 연산 방법, 우선수위. 단, %는 나누기의 나머지 값을 구하는 연산
' / ' 연산 시 형 변환에 유의해야함

비교 연산자 : ==, != , <= , >= , <, >
데이터가 같은지, 다른지 비교할 때 쓰이며 항상 논리 값(true, false)가 결과값임
모든 자료형(기본형,참조형) 사용가능

논리 연산자 : && , || , !
논리 값 두개를 비교하는 연산자
&& : 두 연산자가 모두 true일 때 true 반환(AND)
|| : 두 연산자 중 하나만 true여도 true 반환(OR)
! : 반대

복합 대입 연산자
다른 연산자와 대입 연산자가 결합한 것으로 자기 자신과 연산 후 연산 결과를 자기 자신에게 누적 대입

삼항 연산자

조선식 ? 식 1 : 식2;

조건식의 결과 값에 따라 연산을 처리하는 방식으로 결과값이 참일 경우 식1, 거짓일 경우 식2 수행
삼항 연산자 안에 삼항 연산자를 중첩하여 쓰는 것도 가능

산술 
+ - * / %
/ : 정수 / 정수 => 정수
/, % : 2번째 수는 0이 오면 안 된다.
% : 나누었을 때 나머지로 표현되면
비교
크기비교
논리
&& : 둘다 참이면 참, ~이고
|| : 둘다 거짓이면 거짓, ~이거나
! : 반대, ~아닌
조건선택연산자
조건문으로 대체가능
활용하면 코드가 간결해짐
조건식 ? 참 : 거짓
증감연산자 
-최종적으로 1증가/1감소
-전위 : 증가하고 동작
-후위 : 동작하고 증가
대입연산자
=
오른쪽에 있는 값을 왼쪽에 저장
a = 2; 		(O)
2 = a; 		(X) //오류 
a = 1 +b; 	(O)
a + 1 = b; 	(X) // 오류

String str = a = b ? "참" : "거짓"; 	(X)//오류
String str = a == b ? "참" : "거짓"; 	(O)

비트 연산자 : &, | , ~, ^(배타논리, xor)
& : 비트끼리 &연산
1: 참, 0: 거짓

10 : 00001010
12 : 00001100
      00001000 : 8 : 10 & 12
      00001110 : 14 : 10 | 12
      00000110 : 6 : 10^12
      11110101 : -11 : !10 


a >> b :	a를 비트로 나열한 후 오른쪽으로 b비트만큼 이동, 
	a의 b제곱으로 나눈 효과
  <<    :  a의 b제곱으로 곱한 효과

10 >> 2 : 00001010 => 00000010 : 2
10 << 2 : 00001010 => 00101000 : 40



집가서
1. 성적 평균 내는 코드 짜보기
2. 평균으로 학점 나눠보기 
3. 정수를 입력받고 정수가 짝수인지 홀수인지 출력해보기
